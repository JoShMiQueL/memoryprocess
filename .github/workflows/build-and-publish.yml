name: Build and Publish

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get package.json version
        id: get-local-version
        run: |
          LOCAL_VERSION=$(jq -r .version package.json)
          echo "local_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT

      - name: Get latest npm version for @joshmiquel/memoryjs
        id: get-npm-version
        run: |
          NPM_VERSION=$(npm view @joshmiquel/memoryjs version || echo "0.0.0")
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT

      - name: Validate version increment
        id: check-version
        run: |
          LOCAL_VERSION="${{ steps.get-local-version.outputs.local_version }}"
          NPM_VERSION="${{ steps.get-npm-version.outputs.npm_version }}"

          # Split versions into major, minor, patch
          IFS='.' read -r local_major local_minor local_patch <<< "$LOCAL_VERSION"
          IFS='.' read -r npm_major npm_minor npm_patch <<< "$NPM_VERSION"

          # Function to check if local version is exactly one step ahead
          is_valid_increment() {
            if [ $local_major -eq $npm_major ] && [ $local_minor -eq $npm_minor ] && [ $local_patch -eq $((npm_patch + 1)) ]; then
              return 0 # Valid: patch incremented by 1 (e.g., 1.0.1 -> 1.0.2)
            elif [ $local_major -eq $npm_major ] && [ $local_minor -eq $((npm_minor + 1)) ] && [ $local_patch -eq 0 ]; then
              return 0 # Valid: minor incremented by 1, patch reset (e.g., 1.4.2 -> 1.5.0)
            elif [ $local_major -eq $((npm_major + 1)) ] && [ $local_minor -eq 0 ] && [ $local_patch -eq 0 ]; then
              return 0 # Valid: major incremented by 1, minor and patch reset (e.g., 1.5.0 -> 2.0.0)
            else
              return 1 # Invalid increment
            fi
          }

          # Check if local version is greater than npm version
          if [ $local_major -lt $npm_major ] || \
             { [ $local_major -eq $npm_major ] && [ $local_minor -lt $npm_minor ]; } || \
             { [ $local_major -eq $npm_major ] && [ $local_minor -eq $npm_minor ] && [ $local_patch -le $npm_patch ]; }; then
            echo "Error: Local version ($LOCAL_VERSION) is not greater than npm version ($NPM_VERSION)"
            echo "version_changed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Validate the increment rule
          if is_valid_increment; then
            echo "Version is valid: $LOCAL_VERSION is one step ahead of $NPM_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Error: Local version ($LOCAL_VERSION) does not follow the increment rule from $NPM_VERSION"
            echo "version_changed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --ignore-scripts
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install node-gyp
        run: bun add -g node-gyp

      - name: Build project
        run: bun run build
      
      - name: Upload compiled files
        uses: actions/upload-artifact@v4
        with:
          name: compiled-files
          path: lib/

  publish-npm:
    needs: [check-version, build]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for publish
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm install --ignore-scripts

      - name: Download compiled files
        uses: actions/download-artifact@v4
        with:
          name: compiled-files
          path: lib/
        
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
